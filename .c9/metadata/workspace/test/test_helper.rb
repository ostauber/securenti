{"filter":false,"title":"test_helper.rb","tooltip":"/test/test_helper.rb","undoManager":{"mark":19,"position":19,"stack":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":9,"column":0},"end":{"row":10,"column":0}},"nl":"\n","lines":["    @user = User.new(name: \"Example User\", email: \"user@example.com\")"]},{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":69}},"text":"    @user = User.new(name: \"Example User\", email: \"user@example.com\","},{"action":"insertText","range":{"start":{"row":9,"column":69},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"lines":["                     password: \"foobar\", password_confirmation: \"foobar\")"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":61,"column":0},"end":{"row":62,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":62,"column":0},"end":{"row":62,"column":49}},"text":"  test \"password should have a minimum length\" do"},{"action":"insertText","range":{"start":{"row":62,"column":49},"end":{"row":63,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":63,"column":0},"end":{"row":65,"column":0}},"lines":["    @user.password = @user.password_confirmation = \"a\" * 5","    assert_not @user.valid?"]},{"action":"insertText","range":{"start":{"row":65,"column":0},"end":{"row":65,"column":5}},"text":"  end"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":1}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":68},"end":{"row":9,"column":69}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":68},"end":{"row":9,"column":69}},"text":")"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":62,"column":0},"end":{"row":62,"column":1}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":63,"column":0},"end":{"row":63,"column":1}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":64,"column":0},"end":{"row":64,"column":1}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":65,"column":0},"end":{"row":65,"column":1}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":65,"column":0},"end":{"row":65,"column":6}},"text":"#  end"},{"action":"removeLines","range":{"start":{"row":8,"column":0},"end":{"row":65,"column":0}},"nl":"\n","lines":["  def setup","    @user = User.new(name: \"Example User\", email: \"user@example.com\")","#                     password: \"foobar\", password_confirmation: \"foobar\")","  end","","  test \"should be valid\" do","    assert @user.valid?","  end","","  test \"name should be present\" do","    @user.name = \"     \"","    assert_not @user.valid?","  end","","  test \"email should be present\" do","    @user.email = \"     \"","    assert_not @user.valid?","  end","","  test \"name should not be too long\" do","    @user.name = \"a\" * 51","    assert_not @user.valid?","  end","","  test \"email should not be too long\" do","    @user.email = \"a\" * 256","    assert_not @user.valid?","  end","","  test \"email validation should accept valid addresses\" do","    valid_addresses = %w[user@example.com USER@foo.COM A_US-ER@foo.bar.org","                         first.last@foo.jp alice+bob@baz.cn]","    valid_addresses.each do |valid_address|","      @user.email = valid_address","      assert @user.valid?, \"#{valid_address.inspect} should be valid\"","    end","  end","    ","  test \"email validation should reject invalid addresses\" do","    invalid_addresses = %w[user@example,com user_at_foo.org user.name@example.","                           foo@bar_baz.com foo@bar+baz.com]","    invalid_addresses.each do |invalid_address|","      @user.email = invalid_address","      assert_not @user.valid?, \"#{invalid_address.inspect} should be invalid\"","    end"," end"," ","  test \"email addresses should be unique\" do","    duplicate_user = @user.dup","    duplicate_user.email = @user.email.upcase","    @user.save","    assert_not duplicate_user.valid?","  end","","#  test \"password should have a minimum length\" do","#    @user.password = @user.password_confirmation = \"a\" * 5","#    assert_not @user.valid?"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":7,"column":0},"end":{"row":8,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":27}},"text":"ENV['RAILS_ENV'] ||= 'test'"},{"action":"insertText","range":{"start":{"row":9,"column":27},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":10,"column":0},"end":{"row":21,"column":0}},"lines":["require File.expand_path('../../config/environment', __FILE__)","require 'rails/test_help'","require \"minitest/reporters\"","Minitest::Reporters.use!","","class ActiveSupport::TestCase","  # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical","  # order.","  fixtures :all","","  # Add more helper methods to be used by all tests here..."]},{"action":"insertText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":3}},"text":"end"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":["ENV[\"RAILS_ENV\"] ||= \"test\"","require File.expand_path('../../config/environment', __FILE__)","require 'rails/test_help'","require 'test_helper'"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":0},"end":{"row":4,"column":3}},"text":"end"},{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"nl":"\n","lines":["class ActiveSupport::TestCase"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"nl":"\n","lines":["  ActiveRecord::Migration.check_pending!"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":0},"end":{"row":9,"column":40}},"text":"  ActiveRecord::Migration.check_pending!"},{"action":"insertText","range":{"start":{"row":9,"column":40},"end":{"row":10,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":1}},"text":"#"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":1}},"text":"#"}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":12,"column":1},"end":{"row":12,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1414563239000,"hash":"ab2d9aad9b5cc2ae4344da86fdb4ccaba76d286b"}